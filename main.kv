#:import Window kivy.core.window.Window
#:import cycle itertools.cycle
#:import Factory kivy.factory.Factory
#:import Animation kivy.animation.Animation
#:set PANELCOLOR (.5, .5, .5, 1)

<MySlider@MDSlider>:
	max: 360
	min: -360
	value: 0
	part: None
<MyTextInput>:
	multiline: False
	background_active: ""
	background_normal: ""
	background_color: .7, .7, .7, 1
	foreground_color: .3, .4, .8, 1
	
<Part@BoxLayout>:
	orientation: "vertical"
	id: parent
	lbltext: ""
	sectext: ""
	type: "angle"
	Label:
		text: parent.lbltext+ " "+parent.sectext
	#StackLayout:
	GridLayout:
		rows: 1
		cols: 2
		id: valuegrid
		spacing: -2
		MySlider:
			size_hint_x: .7
			on_value_normalized: app.register_temp(f"{parent.lbltext}.{parent.type} {self.value}")
			#setattr(app.sm, parent.lbltext+parent.type, self.value)
		#MDTextField:
		MyTextInput:
			size_hint_x: .3
			on_text: app.register_temp(f"{parent.lbltext}.{parent.type} {self.text if app.isnumber(self.text) else 0}" if self.text else "")

<Content@BoxLayout>:
	orientation: "vertical"
	MDTextField:
		id: file_loc
		multiline: False
	BoxLayout:
		size_hint_y: .6
		Widget:
		MDRaisedButton:
			text: "Save"
			on_press:
				open(app.outdir+"/"+file_loc.text, "w").write(app.anim_string)
				app.convertFile(app.outdir+"/"+file_loc.text, app.outdir+"/"+file_loc.text[0:file_loc.text.index(".")]+".xml")
			
<FileSave@Popup>:
	id: filesave_input
	title: "Enter file path:"
	title_color: (1,)*4
	markup: True
	content: Factory.Content()
	size_hint: .8, .3
	#background_color: (1,)*3
<Content2@BoxLayout>:
	orientation: 'vertical'
	MDTextField:#MyTextInput:
		id: file_loc
		multiline: False
	BoxLayout:
		size_hint_y: .6
		Widget:
		MDRaisedButton:
			text: "Open"
			on_press:
				app.anim_string=open(app.outdir+"/"+file_loc.text).read()
			
<FileOpen@Popup>:
	title: "Open File:"
	title_color: (1,)*4
	markup: True
	content: Factory.Content2()
	size_hint: .8, .3
	
<MainWindow>:
	cache_panel: cache_panel.__self__
	app: app
	sync_btn_text: cycle(["endsync", "sync"])
	BoxLayout:
		id: bottom_parts_panel
		orientation: "horizontal"
		size_hint: 1, .4
		canvas:
			Color:
				rgba: PANELCOLOR
			RoundedRectangle:
				size: self.size
				pos: self.pos
			Color:
				rgba: .6, .2, .4, .7
			Line:
				width: 3
				points: app.sm.leg12.points[-2]-60, app.sm.leg12.points[-1]-5, app.sm.leg22.points[-2]+50, app.sm.leg22.points[-1]-5
		BoxLayout:
			orientation: "vertical"
			x: -3
			Part:
				lbltext: "arm1j1"
			Part:
				lbltext: "arm1j2"
			Part:
				lbltext: "arm2j1"
			Part:
				lbltext: "arm2j2"
		BoxLayout:
			orientation: "vertical"
			Part:
				lbltext: "leg1j1"
			Part:
				lbltext: "leg1j2"
			Part:
				lbltext: "leg2j1"
			Part:
				lbltext: "leg2j2"
	FloatLayout:
		size_hint: None, None
		size: Window.width*.3, Window.height*.55
		#pos_hint: {"right":1, "top":1}
		pos: Window.width-self.width-3, Window.height -self.height
		id: side_panel
		canvas.before:
			Color:
				rgba: PANELCOLOR
			RoundedRectangle:
				size: self.size
				pos: self.pos
		#GridLayout:
		BoxLayout:
			orientation: "vertical"
			spacing: 4
			rows: len(self.children)+1
			cols: 1
			size_hint: 1, .3
			pos_hint: {"right":1, "top":1}
			x: side_panel.x - 5
			#BoxLayout:
#				orientation: "vertical"
			BoxLayout:
				orientation: "vertical"
				Label:
					color: .2, .3, .7, 1
					text: "speed"
				MDSlider:
					min: 1
					max: 10
					on_value_normalized:
						setattr(app.loader, "speed", self.value)
						app.register_temp(f"\nspeed: {self.value}\n")
						
				Label:
					id: isflip
					text: "Flipped: False"
				MDSwitch:
					on_press:
						app.sm.flipped = not app.sm.flipped
						isflip.text = f"Flipped: {app.sm.flipped}"
		BoxLayout:
			orientation: "vertical"
			spacing: 2
			size_hint: None, None
			size: side_panel.width, side_panel.height*.4
			center_x: side_panel.right - self.width//2
			y: side_panel.y+4
			Button:
				text: "sync"
				on_press:
					app.anim_string+=f"{self.text}:\n"
					self.text = next(root.sync_btn_text)
					
			Button:
				text: "Register"
				on_press: app.append_instr()
				#center_x: side_panel.center_x
				#y: side_panel.y
			Button:
				text: "Run\nCache"
				on_press: app.run_anim()#app.loader.run(app.anim_file.read())
	BoxLayout:
		orientation: "vertical"
		size_hint: None, None
		size: 100, 62*len(self.children)
		pos_hint: {"top":1}
		Button:
			text: "Clear\nCache"
			color: 
			on_press:
				app.anim_string = ""
				app.reset_stickman()
		Button:
			text: "Save To file"
			font_size: "12sp"
			on_press:
				Factory.FileSave().open()
		Button:
			text: "Run file"
			size_hint_x: 1.4
			on_press: Factory.FileOpen().open()
				
	BoxLayout:
		id: extrapanel
		orientation: "vertical"
		pos: -self.width, root.center_y-self.height//2.5
		size_hint: .45, .45
		canvas.before:
			Color:
				rgba: PANELCOLOR
			RoundedRectangle:
				size: self.size
				pos: self.pos
		Part:
			lbltext: "ax_rot"
		Part:
			lbltext: "oposition"
			sectext: "x"
			type: "x"
		Part:
			lbltext: "oposition"
			sectext: "y"
			type: "y"
		Part:
			lbltext: "uax_rot"
		Part:
			lbltext: "lrot"
	Button:
		texts: cycle(["H", "S"])
		text: "S"
		size_hint: None, None
		size: 40,50
		center: extrapanel.right+self.width//2, extrapanel.center_y
		on_press:
			anim = Animation(x=0 if self.text=="S" else -extrapanel.width, duration=.5, )#t="in_expo" )
			anim.start(extrapanel)
			anim.on_complete = lambda *args: setattr(self, "text", next(self.texts))
		
	TextInput:
		id: cache_panel
		readonly: True
		background_active: ""
		background_normal: ""
		foreground_color: 1,1,1,1
		background_color: PANELCOLOR
		use_bubble: False
		size_hint: None, None
		size: root.width*.5, root.height*.35
		center_x: root.width//2 -20
		y: root.top
	Button:
		texts: cycle(["Hide Cache","Show Cache"])
		text: "Show Cache"
		size_hint: None, None
		width: cache_panel.width
		height: 60
		y: cache_panel.y-self.height
		center_x: cache_panel.center_x
		on_press:
			anim2 = Animation(y=root.height-cache_panel.height if self.text=="Show Cache" else root.top, duration=.5)
			anim2.start(cache_panel)
			self.text = next(self.texts)
			#anim.on_complete = lambda *args: setattr(self, "text", next(self.texts))
		